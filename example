To solve the problem, you can follow these steps:

    Create a FileStorage class in models/engine/file_storage.py with private class attributes __file_path and __objects.
    Implement the public instance methods:
        all(self) - returns the dictionary __objects
        new(self, obj) - sets in __objects the obj with key <obj class name>.id
        save(self) - serializes __objects to the JSON file (path: __file_path)
        reload(self) - deserializes the JSON file to __objects (only if the JSON file (__file_path) exists; otherwise, do nothing)
    Create a unique FileStorage instance for your application in models/__init__.py.
    Call reload() method on this variable.
    Link your BaseModel to FileStorage by using the variable storage in models/base_model.py:
        In the save(self) method, call save(self) method of storage.
        In the __init__(self, *args, **kwargs) method, if itâ€™s a new instance (not from a dictionary representation), add a call to the method new(self) on storage.
